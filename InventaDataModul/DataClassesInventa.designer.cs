#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34011
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InventaDataModul
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="webInventa")]
	public partial class DataClassesInventaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertАдрес(Адрес instance);
    partial void UpdateАдрес(Адрес instance);
    partial void DeleteАдрес(Адрес instance);
    partial void InsertЮридическое_лицо(Юридическое_лицо instance);
    partial void UpdateЮридическое_лицо(Юридическое_лицо instance);
    partial void DeleteЮридическое_лицо(Юридическое_лицо instance);
    partial void InsertВид_показателя(Вид_показателя instance);
    partial void UpdateВид_показателя(Вид_показателя instance);
    partial void DeleteВид_показателя(Вид_показателя instance);
    partial void InsertДокумент_работ(Документ_работ instance);
    partial void UpdateДокумент_работ(Документ_работ instance);
    partial void DeleteДокумент_работ(Документ_работ instance);
    partial void InsertДолжность(Должность instance);
    partial void UpdateДолжность(Должность instance);
    partial void DeleteДолжность(Должность instance);
    partial void InsertЕдиницы_измерения(Единицы_измерения instance);
    partial void UpdateЕдиницы_измерения(Единицы_измерения instance);
    partial void DeleteЕдиницы_измерения(Единицы_измерения instance);
    partial void InsertЖурнал(Журнал instance);
    partial void UpdateЖурнал(Журнал instance);
    partial void DeleteЖурнал(Журнал instance);
    partial void InsertЛог(Лог instance);
    partial void UpdateЛог(Лог instance);
    partial void DeleteЛог(Лог instance);
    partial void InsertНаселенный_пункт(Населенный_пункт instance);
    partial void UpdateНаселенный_пункт(Населенный_пункт instance);
    partial void DeleteНаселенный_пункт(Населенный_пункт instance);
    partial void InsertСобытие(Событие instance);
    partial void UpdateСобытие(Событие instance);
    partial void DeleteСобытие(Событие instance);
    partial void InsertТип_журнала(Тип_журнала instance);
    partial void UpdateТип_журнала(Тип_журнала instance);
    partial void DeleteТип_журнала(Тип_журнала instance);
    partial void InsertТип_лога(Тип_лога instance);
    partial void UpdateТип_лога(Тип_лога instance);
    partial void DeleteТип_лога(Тип_лога instance);
    partial void InsertТип_населенного_пункта(Тип_населенного_пункта instance);
    partial void UpdateТип_населенного_пункта(Тип_населенного_пункта instance);
    partial void DeleteТип_населенного_пункта(Тип_населенного_пункта instance);
    partial void InsertТип_показателя(Тип_показателя instance);
    partial void UpdateТип_показателя(Тип_показателя instance);
    partial void DeleteТип_показателя(Тип_показателя instance);
    partial void InsertТип_работ(Тип_работ instance);
    partial void UpdateТип_работ(Тип_работ instance);
    partial void DeleteТип_работ(Тип_работ instance);
    partial void InsertТип_улицы(Тип_улицы instance);
    partial void UpdateТип_улицы(Тип_улицы instance);
    partial void DeleteТип_улицы(Тип_улицы instance);
    partial void InsertТип_юр__лица(Тип_юр__лица instance);
    partial void UpdateТип_юр__лица(Тип_юр__лица instance);
    partial void DeleteТип_юр__лица(Тип_юр__лица instance);
    partial void InsertУлица(Улица instance);
    partial void UpdateУлица(Улица instance);
    partial void DeleteУлица(Улица instance);
    partial void InsertФизическое_лицо(Физическое_лицо instance);
    partial void UpdateФизическое_лицо(Физическое_лицо instance);
    partial void DeleteФизическое_лицо(Физическое_лицо instance);
    partial void InsertФр__труд__договора(Фр__труд__договора instance);
    partial void UpdateФр__труд__договора(Фр__труд__договора instance);
    partial void DeleteФр__труд__договора(Фр__труд__договора instance);
    partial void InsertХост(Хост instance);
    partial void UpdateХост(Хост instance);
    partial void DeleteХост(Хост instance);
    partial void InsertОборудование(Оборудование instance);
    partial void UpdateОборудование(Оборудование instance);
    partial void DeleteОборудование(Оборудование instance);
    partial void InsertПоказатель(Показатель instance);
    partial void UpdateПоказатель(Показатель instance);
    partial void DeleteПоказатель(Показатель instance);
    partial void InsertПоказательОборудование(ПоказательОборудование instance);
    partial void UpdateПоказательОборудование(ПоказательОборудование instance);
    partial void DeleteПоказательОборудование(ПоказательОборудование instance);
    partial void InsertСостояние_оборудования(Состояние_оборудования instance);
    partial void UpdateСостояние_оборудования(Состояние_оборудования instance);
    partial void DeleteСостояние_оборудования(Состояние_оборудования instance);
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertAspNetRoles(AspNetRoles instance);
    partial void UpdateAspNetRoles(AspNetRoles instance);
    partial void DeleteAspNetRoles(AspNetRoles instance);
    partial void InsertAspNetUserRoles(AspNetUserRoles instance);
    partial void UpdateAspNetUserRoles(AspNetUserRoles instance);
    partial void DeleteAspNetUserRoles(AspNetUserRoles instance);
    partial void InsertТег(Тег instance);
    partial void UpdateТег(Тег instance);
    partial void DeleteТег(Тег instance);
    #endregion
		
		public DataClassesInventaDataContext() : 
				base(global::InventaDataModul.Properties.Settings.Default.webInventaConnectionString2, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesInventaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesInventaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesInventaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesInventaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Адрес> Адрес
		{
			get
			{
				return this.GetTable<Адрес>();
			}
		}
		
		public System.Data.Linq.Table<Юридическое_лицо> Юридическое_лицо
		{
			get
			{
				return this.GetTable<Юридическое_лицо>();
			}
		}
		
		public System.Data.Linq.Table<Вид_показателя> Вид_показателя
		{
			get
			{
				return this.GetTable<Вид_показателя>();
			}
		}
		
		public System.Data.Linq.Table<Документ_работ> Документ_работ
		{
			get
			{
				return this.GetTable<Документ_работ>();
			}
		}
		
		public System.Data.Linq.Table<Должность> Должность
		{
			get
			{
				return this.GetTable<Должность>();
			}
		}
		
		public System.Data.Linq.Table<Единицы_измерения> Единицы_измерения
		{
			get
			{
				return this.GetTable<Единицы_измерения>();
			}
		}
		
		public System.Data.Linq.Table<Журнал> Журнал
		{
			get
			{
				return this.GetTable<Журнал>();
			}
		}
		
		public System.Data.Linq.Table<Лог> Лог
		{
			get
			{
				return this.GetTable<Лог>();
			}
		}
		
		public System.Data.Linq.Table<Населенный_пункт> Населенный_пункт
		{
			get
			{
				return this.GetTable<Населенный_пункт>();
			}
		}
		
		public System.Data.Linq.Table<Событие> Событие
		{
			get
			{
				return this.GetTable<Событие>();
			}
		}
		
		public System.Data.Linq.Table<Тип_журнала> Тип_журнала
		{
			get
			{
				return this.GetTable<Тип_журнала>();
			}
		}
		
		public System.Data.Linq.Table<Тип_лога> Тип_лога
		{
			get
			{
				return this.GetTable<Тип_лога>();
			}
		}
		
		public System.Data.Linq.Table<Тип_населенного_пункта> Тип_населенного_пункта
		{
			get
			{
				return this.GetTable<Тип_населенного_пункта>();
			}
		}
		
		public System.Data.Linq.Table<Тип_показателя> Тип_показателя
		{
			get
			{
				return this.GetTable<Тип_показателя>();
			}
		}
		
		public System.Data.Linq.Table<Тип_работ> Тип_работ
		{
			get
			{
				return this.GetTable<Тип_работ>();
			}
		}
		
		public System.Data.Linq.Table<Тип_улицы> Тип_улицы
		{
			get
			{
				return this.GetTable<Тип_улицы>();
			}
		}
		
		public System.Data.Linq.Table<Тип_юр__лица> Тип_юр__лица
		{
			get
			{
				return this.GetTable<Тип_юр__лица>();
			}
		}
		
		public System.Data.Linq.Table<Улица> Улица
		{
			get
			{
				return this.GetTable<Улица>();
			}
		}
		
		public System.Data.Linq.Table<Физическое_лицо> Физическое_лицо
		{
			get
			{
				return this.GetTable<Физическое_лицо>();
			}
		}
		
		public System.Data.Linq.Table<Фр__труд__договора> Фр__труд__договора
		{
			get
			{
				return this.GetTable<Фр__труд__договора>();
			}
		}
		
		public System.Data.Linq.Table<Хост> Хост
		{
			get
			{
				return this.GetTable<Хост>();
			}
		}
		
		public System.Data.Linq.Table<Оборудование> Оборудование
		{
			get
			{
				return this.GetTable<Оборудование>();
			}
		}
		
		public System.Data.Linq.Table<Показатель> Показатель
		{
			get
			{
				return this.GetTable<Показатель>();
			}
		}
		
		public System.Data.Linq.Table<ПоказательОборудование> ПоказательОборудование
		{
			get
			{
				return this.GetTable<ПоказательОборудование>();
			}
		}
		
		public System.Data.Linq.Table<Состояние_оборудования> Состояние_оборудования
		{
			get
			{
				return this.GetTable<Состояние_оборудования>();
			}
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<AspNetRoles> AspNetRoles
		{
			get
			{
				return this.GetTable<AspNetRoles>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserRoles> AspNetUserRoles
		{
			get
			{
				return this.GetTable<AspNetUserRoles>();
			}
		}
		
		public System.Data.Linq.Table<Тег> Тег
		{
			get
			{
				return this.GetTable<Тег>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Адрес")]
	public partial class Адрес : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private int _Номер_дома;
		
		private int _Код_улицы;
		
		private int _Код_нас_пункта;
		
		private System.Nullable<int> _Код_физического_лица;
		
		private EntitySet<Хост> _Хост;
		
		private EntityRef<Населенный_пункт> _Населенный_пункт;
		
		private EntityRef<Улица> _Улица;
		
		private EntityRef<Физическое_лицо> _Физическое_лицо;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНомер_домаChanging(int value);
    partial void OnНомер_домаChanged();
    partial void OnКод_улицыChanging(int value);
    partial void OnКод_улицыChanged();
    partial void OnКод_нас_пунктаChanging(int value);
    partial void OnКод_нас_пунктаChanged();
    partial void OnКод_физического_лицаChanging(System.Nullable<int> value);
    partial void OnКод_физического_лицаChanged();
    #endregion
		
		public Адрес()
		{
			this._Хост = new EntitySet<Хост>(new Action<Хост>(this.attach_Хост), new Action<Хост>(this.detach_Хост));
			this._Населенный_пункт = default(EntityRef<Населенный_пункт>);
			this._Улица = default(EntityRef<Улица>);
			this._Физическое_лицо = default(EntityRef<Физическое_лицо>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер дома]", Storage="_Номер_дома", DbType="Int NOT NULL")]
		public int Номер_дома
		{
			get
			{
				return this._Номер_дома;
			}
			set
			{
				if ((this._Номер_дома != value))
				{
					this.OnНомер_домаChanging(value);
					this.SendPropertyChanging();
					this._Номер_дома = value;
					this.SendPropertyChanged("Номер_дома");
					this.OnНомер_домаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код улицы]", Storage="_Код_улицы", DbType="Int NOT NULL")]
		public int Код_улицы
		{
			get
			{
				return this._Код_улицы;
			}
			set
			{
				if ((this._Код_улицы != value))
				{
					this.OnКод_улицыChanging(value);
					this.SendPropertyChanging();
					this._Код_улицы = value;
					this.SendPropertyChanged("Код_улицы");
					this.OnКод_улицыChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код нас пункта]", Storage="_Код_нас_пункта", DbType="Int NOT NULL")]
		public int Код_нас_пункта
		{
			get
			{
				return this._Код_нас_пункта;
			}
			set
			{
				if ((this._Код_нас_пункта != value))
				{
					this.OnКод_нас_пунктаChanging(value);
					this.SendPropertyChanging();
					this._Код_нас_пункта = value;
					this.SendPropertyChanged("Код_нас_пункта");
					this.OnКод_нас_пунктаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код физического лица]", Storage="_Код_физического_лица", DbType="Int")]
		public System.Nullable<int> Код_физического_лица
		{
			get
			{
				return this._Код_физического_лица;
			}
			set
			{
				if ((this._Код_физического_лица != value))
				{
					this.OnКод_физического_лицаChanging(value);
					this.SendPropertyChanging();
					this._Код_физического_лица = value;
					this.SendPropertyChanged("Код_физического_лица");
					this.OnКод_физического_лицаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Адрес_Хост", Storage="_Хост", ThisKey="Код", OtherKey="Код_адреса")]
		public EntitySet<Хост> Хост
		{
			get
			{
				return this._Хост;
			}
			set
			{
				this._Хост.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Населенный_пункт_Адрес", Storage="_Населенный_пункт", ThisKey="Код_нас_пункта", OtherKey="Код", IsForeignKey=true)]
		public Населенный_пункт Населенный_пункт
		{
			get
			{
				return this._Населенный_пункт.Entity;
			}
			set
			{
				Населенный_пункт previousValue = this._Населенный_пункт.Entity;
				if (((previousValue != value) 
							|| (this._Населенный_пункт.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Населенный_пункт.Entity = null;
						previousValue.Адрес.Remove(this);
					}
					this._Населенный_пункт.Entity = value;
					if ((value != null))
					{
						value.Адрес.Add(this);
						this._Код_нас_пункта = value.Код;
					}
					else
					{
						this._Код_нас_пункта = default(int);
					}
					this.SendPropertyChanged("Населенный_пункт");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Улица_Адрес", Storage="_Улица", ThisKey="Код_улицы", OtherKey="Код", IsForeignKey=true)]
		public Улица Улица
		{
			get
			{
				return this._Улица.Entity;
			}
			set
			{
				Улица previousValue = this._Улица.Entity;
				if (((previousValue != value) 
							|| (this._Улица.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Улица.Entity = null;
						previousValue.Адрес.Remove(this);
					}
					this._Улица.Entity = value;
					if ((value != null))
					{
						value.Адрес.Add(this);
						this._Код_улицы = value.Код;
					}
					else
					{
						this._Код_улицы = default(int);
					}
					this.SendPropertyChanged("Улица");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Физическое_лицо_Адрес", Storage="_Физическое_лицо", ThisKey="Код_физического_лица", OtherKey="Код", IsForeignKey=true)]
		public Физическое_лицо Физическое_лицо
		{
			get
			{
				return this._Физическое_лицо.Entity;
			}
			set
			{
				Физическое_лицо previousValue = this._Физическое_лицо.Entity;
				if (((previousValue != value) 
							|| (this._Физическое_лицо.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Физическое_лицо.Entity = null;
						previousValue.Адрес.Remove(this);
					}
					this._Физическое_лицо.Entity = value;
					if ((value != null))
					{
						value.Адрес.Add(this);
						this._Код_физического_лица = value.Код;
					}
					else
					{
						this._Код_физического_лица = default(Nullable<int>);
					}
					this.SendPropertyChanged("Физическое_лицо");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Хост(Хост entity)
		{
			this.SendPropertyChanging();
			entity.Адрес = this;
		}
		
		private void detach_Хост(Хост entity)
		{
			this.SendPropertyChanging();
			entity.Адрес = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Юридическое лицо]")]
	public partial class Юридическое_лицо : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private string _Краткое_название;
		
		private string _Телефон;
		
		private int _Код_типа;
		
		private System.Nullable<int> _Код_юрид__лица;
		
		private EntitySet<Юридическое_лицо> _Юридическое_лицо2;
		
		private EntitySet<Фр__труд__договора> _Фр__труд__договора;
		
		private EntitySet<Оборудование> _Оборудование;
		
		private EntityRef<Юридическое_лицо> _Юридическое_лицо1;
		
		private EntityRef<Тип_юр__лица> _Тип_юр__лица;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnКраткое_названиеChanging(string value);
    partial void OnКраткое_названиеChanged();
    partial void OnТелефонChanging(string value);
    partial void OnТелефонChanged();
    partial void OnКод_типаChanging(int value);
    partial void OnКод_типаChanged();
    partial void OnКод_юрид__лицаChanging(System.Nullable<int> value);
    partial void OnКод_юрид__лицаChanged();
    #endregion
		
		public Юридическое_лицо()
		{
			this._Юридическое_лицо2 = new EntitySet<Юридическое_лицо>(new Action<Юридическое_лицо>(this.attach_Юридическое_лицо2), new Action<Юридическое_лицо>(this.detach_Юридическое_лицо2));
			this._Фр__труд__договора = new EntitySet<Фр__труд__договора>(new Action<Фр__труд__договора>(this.attach_Фр__труд__договора), new Action<Фр__труд__договора>(this.detach_Фр__труд__договора));
			this._Оборудование = new EntitySet<Оборудование>(new Action<Оборудование>(this.attach_Оборудование), new Action<Оборудование>(this.detach_Оборудование));
			this._Юридическое_лицо1 = default(EntityRef<Юридическое_лицо>);
			this._Тип_юр__лица = default(EntityRef<Тип_юр__лица>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Краткое название]", Storage="_Краткое_название", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Краткое_название
		{
			get
			{
				return this._Краткое_название;
			}
			set
			{
				if ((this._Краткое_название != value))
				{
					this.OnКраткое_названиеChanging(value);
					this.SendPropertyChanging();
					this._Краткое_название = value;
					this.SendPropertyChanged("Краткое_название");
					this.OnКраткое_названиеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Телефон", DbType="NVarChar(50)")]
		public string Телефон
		{
			get
			{
				return this._Телефон;
			}
			set
			{
				if ((this._Телефон != value))
				{
					this.OnТелефонChanging(value);
					this.SendPropertyChanging();
					this._Телефон = value;
					this.SendPropertyChanged("Телефон");
					this.OnТелефонChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код типа]", Storage="_Код_типа", DbType="Int NOT NULL")]
		public int Код_типа
		{
			get
			{
				return this._Код_типа;
			}
			set
			{
				if ((this._Код_типа != value))
				{
					this.OnКод_типаChanging(value);
					this.SendPropertyChanging();
					this._Код_типа = value;
					this.SendPropertyChanged("Код_типа");
					this.OnКод_типаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код юрид. лица]", Storage="_Код_юрид__лица", DbType="Int")]
		public System.Nullable<int> Код_юрид__лица
		{
			get
			{
				return this._Код_юрид__лица;
			}
			set
			{
				if ((this._Код_юрид__лица != value))
				{
					this.OnКод_юрид__лицаChanging(value);
					this.SendPropertyChanging();
					this._Код_юрид__лица = value;
					this.SendPropertyChanged("Код_юрид__лица");
					this.OnКод_юрид__лицаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Юридическое_лицо_Юридическое_лицо", Storage="_Юридическое_лицо2", ThisKey="Код", OtherKey="Код_юрид__лица")]
		public EntitySet<Юридическое_лицо> Юридическое_лицо2
		{
			get
			{
				return this._Юридическое_лицо2;
			}
			set
			{
				this._Юридическое_лицо2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Юридическое_лицо_Фр__труд__договора", Storage="_Фр__труд__договора", ThisKey="Код", OtherKey="Код_юр__лица")]
		public EntitySet<Фр__труд__договора> Фр__труд__договора
		{
			get
			{
				return this._Фр__труд__договора;
			}
			set
			{
				this._Фр__труд__договора.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Юридическое_лицо_Оборудование", Storage="_Оборудование", ThisKey="Код", OtherKey="Код_юр__лица")]
		public EntitySet<Оборудование> Оборудование
		{
			get
			{
				return this._Оборудование;
			}
			set
			{
				this._Оборудование.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Юридическое_лицо_Юридическое_лицо", Storage="_Юридическое_лицо1", ThisKey="Код_юрид__лица", OtherKey="Код", IsForeignKey=true)]
		public Юридическое_лицо Юридическое_лицо1
		{
			get
			{
				return this._Юридическое_лицо1.Entity;
			}
			set
			{
				Юридическое_лицо previousValue = this._Юридическое_лицо1.Entity;
				if (((previousValue != value) 
							|| (this._Юридическое_лицо1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Юридическое_лицо1.Entity = null;
						previousValue.Юридическое_лицо2.Remove(this);
					}
					this._Юридическое_лицо1.Entity = value;
					if ((value != null))
					{
						value.Юридическое_лицо2.Add(this);
						this._Код_юрид__лица = value.Код;
					}
					else
					{
						this._Код_юрид__лица = default(Nullable<int>);
					}
					this.SendPropertyChanged("Юридическое_лицо1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_юр__лица_Юридическое_лицо", Storage="_Тип_юр__лица", ThisKey="Код_типа", OtherKey="Код", IsForeignKey=true)]
		public Тип_юр__лица Тип_юр__лица
		{
			get
			{
				return this._Тип_юр__лица.Entity;
			}
			set
			{
				Тип_юр__лица previousValue = this._Тип_юр__лица.Entity;
				if (((previousValue != value) 
							|| (this._Тип_юр__лица.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Тип_юр__лица.Entity = null;
						previousValue.Юридическое_лицо.Remove(this);
					}
					this._Тип_юр__лица.Entity = value;
					if ((value != null))
					{
						value.Юридическое_лицо.Add(this);
						this._Код_типа = value.Код;
					}
					else
					{
						this._Код_типа = default(int);
					}
					this.SendPropertyChanged("Тип_юр__лица");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Юридическое_лицо2(Юридическое_лицо entity)
		{
			this.SendPropertyChanging();
			entity.Юридическое_лицо1 = this;
		}
		
		private void detach_Юридическое_лицо2(Юридическое_лицо entity)
		{
			this.SendPropertyChanging();
			entity.Юридическое_лицо1 = null;
		}
		
		private void attach_Фр__труд__договора(Фр__труд__договора entity)
		{
			this.SendPropertyChanging();
			entity.Юридическое_лицо = this;
		}
		
		private void detach_Фр__труд__договора(Фр__труд__договора entity)
		{
			this.SendPropertyChanging();
			entity.Юридическое_лицо = null;
		}
		
		private void attach_Оборудование(Оборудование entity)
		{
			this.SendPropertyChanging();
			entity.Юридическое_лицо = this;
		}
		
		private void detach_Оборудование(Оборудование entity)
		{
			this.SendPropertyChanging();
			entity.Юридическое_лицо = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Вид показателя]")]
	public partial class Вид_показателя : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private string _Описание;
		
		private EntitySet<Показатель> _Показатель;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnОписаниеChanging(string value);
    partial void OnОписаниеChanged();
    #endregion
		
		public Вид_показателя()
		{
			this._Показатель = new EntitySet<Показатель>(new Action<Показатель>(this.attach_Показатель), new Action<Показатель>(this.detach_Показатель));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Описание", DbType="NVarChar(150)")]
		public string Описание
		{
			get
			{
				return this._Описание;
			}
			set
			{
				if ((this._Описание != value))
				{
					this.OnОписаниеChanging(value);
					this.SendPropertyChanging();
					this._Описание = value;
					this.SendPropertyChanged("Описание");
					this.OnОписаниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Вид_показателя_Показатель", Storage="_Показатель", ThisKey="Код", OtherKey="Код_вида_показателя")]
		public EntitySet<Показатель> Показатель
		{
			get
			{
				return this._Показатель;
			}
			set
			{
				this._Показатель.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Показатель(Показатель entity)
		{
			this.SendPropertyChanging();
			entity.Вид_показателя = this;
		}
		
		private void detach_Показатель(Показатель entity)
		{
			this.SendPropertyChanging();
			entity.Вид_показателя = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Документ работ]")]
	public partial class Документ_работ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер;
		
		private string _Название;
		
		private System.DateTime _Дата;
		
		private string _Описание;
		
		private int _Код_хоста;
		
		private int _Код_фр__труд__дог_;
		
		private int _Код_типа;
		
		private int _Код_оборудования;
		
		private EntityRef<Тип_работ> _Тип_работ;
		
		private EntityRef<Фр__труд__договора> _Фр__труд__договора;
		
		private EntityRef<Хост> _Хост;
		
		private EntityRef<Оборудование> _Оборудование;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомерChanging(int value);
    partial void OnНомерChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnДатаChanging(System.DateTime value);
    partial void OnДатаChanged();
    partial void OnОписаниеChanging(string value);
    partial void OnОписаниеChanged();
    partial void OnКод_хостаChanging(int value);
    partial void OnКод_хостаChanged();
    partial void OnКод_фр__труд__дог_Changing(int value);
    partial void OnКод_фр__труд__дог_Changed();
    partial void OnКод_типаChanging(int value);
    partial void OnКод_типаChanged();
    partial void OnКод_оборудованияChanging(int value);
    partial void OnКод_оборудованияChanged();
    #endregion
		
		public Документ_работ()
		{
			this._Тип_работ = default(EntityRef<Тип_работ>);
			this._Фр__труд__договора = default(EntityRef<Фр__труд__договора>);
			this._Хост = default(EntityRef<Хост>);
			this._Оборудование = default(EntityRef<Оборудование>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер
		{
			get
			{
				return this._Номер;
			}
			set
			{
				if ((this._Номер != value))
				{
					this.OnНомерChanging(value);
					this.SendPropertyChanging();
					this._Номер = value;
					this.SendPropertyChanged("Номер");
					this.OnНомерChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата", DbType="Date NOT NULL")]
		public System.DateTime Дата
		{
			get
			{
				return this._Дата;
			}
			set
			{
				if ((this._Дата != value))
				{
					this.OnДатаChanging(value);
					this.SendPropertyChanging();
					this._Дата = value;
					this.SendPropertyChanged("Дата");
					this.OnДатаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Описание", DbType="NVarChar(150)")]
		public string Описание
		{
			get
			{
				return this._Описание;
			}
			set
			{
				if ((this._Описание != value))
				{
					this.OnОписаниеChanging(value);
					this.SendPropertyChanging();
					this._Описание = value;
					this.SendPropertyChanged("Описание");
					this.OnОписаниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код хоста]", Storage="_Код_хоста", DbType="Int NOT NULL")]
		public int Код_хоста
		{
			get
			{
				return this._Код_хоста;
			}
			set
			{
				if ((this._Код_хоста != value))
				{
					this.OnКод_хостаChanging(value);
					this.SendPropertyChanging();
					this._Код_хоста = value;
					this.SendPropertyChanged("Код_хоста");
					this.OnКод_хостаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код фр. труд. дог.]", Storage="_Код_фр__труд__дог_", DbType="Int NOT NULL")]
		public int Код_фр__труд__дог_
		{
			get
			{
				return this._Код_фр__труд__дог_;
			}
			set
			{
				if ((this._Код_фр__труд__дог_ != value))
				{
					this.OnКод_фр__труд__дог_Changing(value);
					this.SendPropertyChanging();
					this._Код_фр__труд__дог_ = value;
					this.SendPropertyChanged("Код_фр__труд__дог_");
					this.OnКод_фр__труд__дог_Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код типа]", Storage="_Код_типа", DbType="Int NOT NULL")]
		public int Код_типа
		{
			get
			{
				return this._Код_типа;
			}
			set
			{
				if ((this._Код_типа != value))
				{
					this.OnКод_типаChanging(value);
					this.SendPropertyChanging();
					this._Код_типа = value;
					this.SendPropertyChanged("Код_типа");
					this.OnКод_типаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код оборудования]", Storage="_Код_оборудования", DbType="Int NOT NULL")]
		public int Код_оборудования
		{
			get
			{
				return this._Код_оборудования;
			}
			set
			{
				if ((this._Код_оборудования != value))
				{
					this.OnКод_оборудованияChanging(value);
					this.SendPropertyChanging();
					this._Код_оборудования = value;
					this.SendPropertyChanged("Код_оборудования");
					this.OnКод_оборудованияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_работ_Документ_работ", Storage="_Тип_работ", ThisKey="Код_типа", OtherKey="Код", IsForeignKey=true)]
		public Тип_работ Тип_работ
		{
			get
			{
				return this._Тип_работ.Entity;
			}
			set
			{
				Тип_работ previousValue = this._Тип_работ.Entity;
				if (((previousValue != value) 
							|| (this._Тип_работ.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Тип_работ.Entity = null;
						previousValue.Документ_работ.Remove(this);
					}
					this._Тип_работ.Entity = value;
					if ((value != null))
					{
						value.Документ_работ.Add(this);
						this._Код_типа = value.Код;
					}
					else
					{
						this._Код_типа = default(int);
					}
					this.SendPropertyChanged("Тип_работ");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Фр__труд__договора_Документ_работ", Storage="_Фр__труд__договора", ThisKey="Код_фр__труд__дог_", OtherKey="Номер", IsForeignKey=true)]
		public Фр__труд__договора Фр__труд__договора
		{
			get
			{
				return this._Фр__труд__договора.Entity;
			}
			set
			{
				Фр__труд__договора previousValue = this._Фр__труд__договора.Entity;
				if (((previousValue != value) 
							|| (this._Фр__труд__договора.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Фр__труд__договора.Entity = null;
						previousValue.Документ_работ.Remove(this);
					}
					this._Фр__труд__договора.Entity = value;
					if ((value != null))
					{
						value.Документ_работ.Add(this);
						this._Код_фр__труд__дог_ = value.Номер;
					}
					else
					{
						this._Код_фр__труд__дог_ = default(int);
					}
					this.SendPropertyChanged("Фр__труд__договора");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Хост_Документ_работ", Storage="_Хост", ThisKey="Код_хоста", OtherKey="Номер", IsForeignKey=true)]
		public Хост Хост
		{
			get
			{
				return this._Хост.Entity;
			}
			set
			{
				Хост previousValue = this._Хост.Entity;
				if (((previousValue != value) 
							|| (this._Хост.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Хост.Entity = null;
						previousValue.Документ_работ.Remove(this);
					}
					this._Хост.Entity = value;
					if ((value != null))
					{
						value.Документ_работ.Add(this);
						this._Код_хоста = value.Номер;
					}
					else
					{
						this._Код_хоста = default(int);
					}
					this.SendPropertyChanged("Хост");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Оборудование_Документ_работ", Storage="_Оборудование", ThisKey="Код_оборудования", OtherKey="Номер", IsForeignKey=true)]
		public Оборудование Оборудование
		{
			get
			{
				return this._Оборудование.Entity;
			}
			set
			{
				Оборудование previousValue = this._Оборудование.Entity;
				if (((previousValue != value) 
							|| (this._Оборудование.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Оборудование.Entity = null;
						previousValue.Документ_работ.Remove(this);
					}
					this._Оборудование.Entity = value;
					if ((value != null))
					{
						value.Документ_работ.Add(this);
						this._Код_оборудования = value.Номер;
					}
					else
					{
						this._Код_оборудования = default(int);
					}
					this.SendPropertyChanged("Оборудование");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Должность")]
	public partial class Должность : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private string _Краткое_название;
		
		private EntitySet<Фр__труд__договора> _Фр__труд__договора;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnКраткое_названиеChanging(string value);
    partial void OnКраткое_названиеChanged();
    #endregion
		
		public Должность()
		{
			this._Фр__труд__договора = new EntitySet<Фр__труд__договора>(new Action<Фр__труд__договора>(this.attach_Фр__труд__договора), new Action<Фр__труд__договора>(this.detach_Фр__труд__договора));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Краткое название]", Storage="_Краткое_название", DbType="NVarChar(50)")]
		public string Краткое_название
		{
			get
			{
				return this._Краткое_название;
			}
			set
			{
				if ((this._Краткое_название != value))
				{
					this.OnКраткое_названиеChanging(value);
					this.SendPropertyChanging();
					this._Краткое_название = value;
					this.SendPropertyChanged("Краткое_название");
					this.OnКраткое_названиеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Должность_Фр__труд__договора", Storage="_Фр__труд__договора", ThisKey="Код", OtherKey="Код_должности")]
		public EntitySet<Фр__труд__договора> Фр__труд__договора
		{
			get
			{
				return this._Фр__труд__договора;
			}
			set
			{
				this._Фр__труд__договора.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Фр__труд__договора(Фр__труд__договора entity)
		{
			this.SendPropertyChanging();
			entity.Должность = this;
		}
		
		private void detach_Фр__труд__договора(Фр__труд__договора entity)
		{
			this.SendPropertyChanging();
			entity.Должность = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Единицы измерения]")]
	public partial class Единицы_измерения : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private string _Краткое_название;
		
		private EntitySet<Показатель> _Показатель;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnКраткое_названиеChanging(string value);
    partial void OnКраткое_названиеChanged();
    #endregion
		
		public Единицы_измерения()
		{
			this._Показатель = new EntitySet<Показатель>(new Action<Показатель>(this.attach_Показатель), new Action<Показатель>(this.detach_Показатель));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Краткое название]", Storage="_Краткое_название", DbType="NChar(10)")]
		public string Краткое_название
		{
			get
			{
				return this._Краткое_название;
			}
			set
			{
				if ((this._Краткое_название != value))
				{
					this.OnКраткое_названиеChanging(value);
					this.SendPropertyChanging();
					this._Краткое_название = value;
					this.SendPropertyChanged("Краткое_название");
					this.OnКраткое_названиеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Единицы_измерения_Показатель", Storage="_Показатель", ThisKey="Код", OtherKey="Единицы_измерения")]
		public EntitySet<Показатель> Показатель
		{
			get
			{
				return this._Показатель;
			}
			set
			{
				this._Показатель.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Показатель(Показатель entity)
		{
			this.SendPropertyChanging();
			entity.Единицы_измерения1 = this;
		}
		
		private void detach_Показатель(Показатель entity)
		{
			this.SendPropertyChanging();
			entity.Единицы_измерения1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Журнал")]
	public partial class Журнал : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер;
		
		private string _Название;
		
		private int _Код_типа;
		
		private EntitySet<Событие> _Событие;
		
		private EntityRef<Тип_журнала> _Тип_журнала;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомерChanging(int value);
    partial void OnНомерChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnКод_типаChanging(int value);
    partial void OnКод_типаChanged();
    #endregion
		
		public Журнал()
		{
			this._Событие = new EntitySet<Событие>(new Action<Событие>(this.attach_Событие), new Action<Событие>(this.detach_Событие));
			this._Тип_журнала = default(EntityRef<Тип_журнала>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер
		{
			get
			{
				return this._Номер;
			}
			set
			{
				if ((this._Номер != value))
				{
					this.OnНомерChanging(value);
					this.SendPropertyChanging();
					this._Номер = value;
					this.SendPropertyChanged("Номер");
					this.OnНомерChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50)")]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код типа]", Storage="_Код_типа", DbType="Int NOT NULL")]
		public int Код_типа
		{
			get
			{
				return this._Код_типа;
			}
			set
			{
				if ((this._Код_типа != value))
				{
					this.OnКод_типаChanging(value);
					this.SendPropertyChanging();
					this._Код_типа = value;
					this.SendPropertyChanged("Код_типа");
					this.OnКод_типаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Журнал_Событие", Storage="_Событие", ThisKey="Номер", OtherKey="Код_журнала")]
		public EntitySet<Событие> Событие
		{
			get
			{
				return this._Событие;
			}
			set
			{
				this._Событие.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_журнала_Журнал", Storage="_Тип_журнала", ThisKey="Код_типа", OtherKey="Код", IsForeignKey=true)]
		public Тип_журнала Тип_журнала
		{
			get
			{
				return this._Тип_журнала.Entity;
			}
			set
			{
				Тип_журнала previousValue = this._Тип_журнала.Entity;
				if (((previousValue != value) 
							|| (this._Тип_журнала.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Тип_журнала.Entity = null;
						previousValue.Журнал.Remove(this);
					}
					this._Тип_журнала.Entity = value;
					if ((value != null))
					{
						value.Журнал.Add(this);
						this._Код_типа = value.Код;
					}
					else
					{
						this._Код_типа = default(int);
					}
					this.SendPropertyChanged("Тип_журнала");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Событие(Событие entity)
		{
			this.SendPropertyChanging();
			entity.Журнал = this;
		}
		
		private void detach_Событие(Событие entity)
		{
			this.SendPropertyChanging();
			entity.Журнал = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Лог")]
	public partial class Лог : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер;
		
		private string _Сообщение;
		
		private int _Код_тега;
		
		private int _Код_лога;
		
		private EntitySet<Событие> _Событие;
		
		private EntityRef<Тип_лога> _Тип_лога;
		
		private EntityRef<Тег> _Тег;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомерChanging(int value);
    partial void OnНомерChanged();
    partial void OnСообщениеChanging(string value);
    partial void OnСообщениеChanged();
    partial void OnКод_тегаChanging(int value);
    partial void OnКод_тегаChanged();
    partial void OnКод_логаChanging(int value);
    partial void OnКод_логаChanged();
    #endregion
		
		public Лог()
		{
			this._Событие = new EntitySet<Событие>(new Action<Событие>(this.attach_Событие), new Action<Событие>(this.detach_Событие));
			this._Тип_лога = default(EntityRef<Тип_лога>);
			this._Тег = default(EntityRef<Тег>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер
		{
			get
			{
				return this._Номер;
			}
			set
			{
				if ((this._Номер != value))
				{
					this.OnНомерChanging(value);
					this.SendPropertyChanging();
					this._Номер = value;
					this.SendPropertyChanged("Номер");
					this.OnНомерChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Сообщение", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Сообщение
		{
			get
			{
				return this._Сообщение;
			}
			set
			{
				if ((this._Сообщение != value))
				{
					this.OnСообщениеChanging(value);
					this.SendPropertyChanging();
					this._Сообщение = value;
					this.SendPropertyChanged("Сообщение");
					this.OnСообщениеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код тега]", Storage="_Код_тега", DbType="Int NOT NULL")]
		public int Код_тега
		{
			get
			{
				return this._Код_тега;
			}
			set
			{
				if ((this._Код_тега != value))
				{
					this.OnКод_тегаChanging(value);
					this.SendPropertyChanging();
					this._Код_тега = value;
					this.SendPropertyChanged("Код_тега");
					this.OnКод_тегаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код лога]", Storage="_Код_лога", DbType="Int NOT NULL")]
		public int Код_лога
		{
			get
			{
				return this._Код_лога;
			}
			set
			{
				if ((this._Код_лога != value))
				{
					this.OnКод_логаChanging(value);
					this.SendPropertyChanging();
					this._Код_лога = value;
					this.SendPropertyChanged("Код_лога");
					this.OnКод_логаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Лог_Событие", Storage="_Событие", ThisKey="Номер", OtherKey="Код_лога")]
		public EntitySet<Событие> Событие
		{
			get
			{
				return this._Событие;
			}
			set
			{
				this._Событие.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_лога_Лог", Storage="_Тип_лога", ThisKey="Код_лога", OtherKey="Код", IsForeignKey=true)]
		public Тип_лога Тип_лога
		{
			get
			{
				return this._Тип_лога.Entity;
			}
			set
			{
				Тип_лога previousValue = this._Тип_лога.Entity;
				if (((previousValue != value) 
							|| (this._Тип_лога.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Тип_лога.Entity = null;
						previousValue.Лог.Remove(this);
					}
					this._Тип_лога.Entity = value;
					if ((value != null))
					{
						value.Лог.Add(this);
						this._Код_лога = value.Код;
					}
					else
					{
						this._Код_лога = default(int);
					}
					this.SendPropertyChanged("Тип_лога");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тег_Лог", Storage="_Тег", ThisKey="Код_тега", OtherKey="Код", IsForeignKey=true)]
		public Тег Тег
		{
			get
			{
				return this._Тег.Entity;
			}
			set
			{
				Тег previousValue = this._Тег.Entity;
				if (((previousValue != value) 
							|| (this._Тег.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Тег.Entity = null;
						previousValue.Лог.Remove(this);
					}
					this._Тег.Entity = value;
					if ((value != null))
					{
						value.Лог.Add(this);
						this._Код_тега = value.Код;
					}
					else
					{
						this._Код_тега = default(int);
					}
					this.SendPropertyChanged("Тег");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Событие(Событие entity)
		{
			this.SendPropertyChanging();
			entity.Лог = this;
		}
		
		private void detach_Событие(Событие entity)
		{
			this.SendPropertyChanging();
			entity.Лог = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Населенный пункт]")]
	public partial class Населенный_пункт : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private int _Код_типа;
		
		private EntitySet<Адрес> _Адрес;
		
		private EntityRef<Тип_населенного_пункта> _Тип_населенного_пункта;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnКод_типаChanging(int value);
    partial void OnКод_типаChanged();
    #endregion
		
		public Населенный_пункт()
		{
			this._Адрес = new EntitySet<Адрес>(new Action<Адрес>(this.attach_Адрес), new Action<Адрес>(this.detach_Адрес));
			this._Тип_населенного_пункта = default(EntityRef<Тип_населенного_пункта>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код типа]", Storage="_Код_типа", DbType="Int NOT NULL")]
		public int Код_типа
		{
			get
			{
				return this._Код_типа;
			}
			set
			{
				if ((this._Код_типа != value))
				{
					this.OnКод_типаChanging(value);
					this.SendPropertyChanging();
					this._Код_типа = value;
					this.SendPropertyChanged("Код_типа");
					this.OnКод_типаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Населенный_пункт_Адрес", Storage="_Адрес", ThisKey="Код", OtherKey="Код_нас_пункта")]
		public EntitySet<Адрес> Адрес
		{
			get
			{
				return this._Адрес;
			}
			set
			{
				this._Адрес.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_населенного_пункта_Населенный_пункт", Storage="_Тип_населенного_пункта", ThisKey="Код_типа", OtherKey="Код", IsForeignKey=true)]
		public Тип_населенного_пункта Тип_населенного_пункта
		{
			get
			{
				return this._Тип_населенного_пункта.Entity;
			}
			set
			{
				Тип_населенного_пункта previousValue = this._Тип_населенного_пункта.Entity;
				if (((previousValue != value) 
							|| (this._Тип_населенного_пункта.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Тип_населенного_пункта.Entity = null;
						previousValue.Населенный_пункт.Remove(this);
					}
					this._Тип_населенного_пункта.Entity = value;
					if ((value != null))
					{
						value.Населенный_пункт.Add(this);
						this._Код_типа = value.Код;
					}
					else
					{
						this._Код_типа = default(int);
					}
					this.SendPropertyChanged("Тип_населенного_пункта");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Адрес(Адрес entity)
		{
			this.SendPropertyChanging();
			entity.Населенный_пункт = this;
		}
		
		private void detach_Адрес(Адрес entity)
		{
			this.SendPropertyChanging();
			entity.Населенный_пункт = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Событие")]
	public partial class Событие : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private System.DateTime _Дата;
		
		private string _Описание;
		
		private int _Код_журнала;
		
		private int _Код_хоста;
		
		private System.Nullable<int> _Код_лога;
		
		private System.Nullable<int> _Код_состояния;
		
		private EntityRef<Журнал> _Журнал;
		
		private EntityRef<Лог> _Лог;
		
		private EntityRef<Хост> _Хост;
		
		private EntityRef<Состояние_оборудования> _Состояние_оборудования;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnДатаChanging(System.DateTime value);
    partial void OnДатаChanged();
    partial void OnОписаниеChanging(string value);
    partial void OnОписаниеChanged();
    partial void OnКод_журналаChanging(int value);
    partial void OnКод_журналаChanged();
    partial void OnКод_хостаChanging(int value);
    partial void OnКод_хостаChanged();
    partial void OnКод_логаChanging(System.Nullable<int> value);
    partial void OnКод_логаChanged();
    partial void OnКод_состоянияChanging(System.Nullable<int> value);
    partial void OnКод_состоянияChanged();
    #endregion
		
		public Событие()
		{
			this._Журнал = default(EntityRef<Журнал>);
			this._Лог = default(EntityRef<Лог>);
			this._Хост = default(EntityRef<Хост>);
			this._Состояние_оборудования = default(EntityRef<Состояние_оборудования>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Дата", DbType="Date NOT NULL")]
		public System.DateTime Дата
		{
			get
			{
				return this._Дата;
			}
			set
			{
				if ((this._Дата != value))
				{
					this.OnДатаChanging(value);
					this.SendPropertyChanging();
					this._Дата = value;
					this.SendPropertyChanged("Дата");
					this.OnДатаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Описание", DbType="NVarChar(150)")]
		public string Описание
		{
			get
			{
				return this._Описание;
			}
			set
			{
				if ((this._Описание != value))
				{
					this.OnОписаниеChanging(value);
					this.SendPropertyChanging();
					this._Описание = value;
					this.SendPropertyChanged("Описание");
					this.OnОписаниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код журнала]", Storage="_Код_журнала", DbType="Int NOT NULL")]
		public int Код_журнала
		{
			get
			{
				return this._Код_журнала;
			}
			set
			{
				if ((this._Код_журнала != value))
				{
					this.OnКод_журналаChanging(value);
					this.SendPropertyChanging();
					this._Код_журнала = value;
					this.SendPropertyChanged("Код_журнала");
					this.OnКод_журналаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код хоста]", Storage="_Код_хоста", DbType="Int NOT NULL")]
		public int Код_хоста
		{
			get
			{
				return this._Код_хоста;
			}
			set
			{
				if ((this._Код_хоста != value))
				{
					this.OnКод_хостаChanging(value);
					this.SendPropertyChanging();
					this._Код_хоста = value;
					this.SendPropertyChanged("Код_хоста");
					this.OnКод_хостаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код лога]", Storage="_Код_лога", DbType="Int")]
		public System.Nullable<int> Код_лога
		{
			get
			{
				return this._Код_лога;
			}
			set
			{
				if ((this._Код_лога != value))
				{
					this.OnКод_логаChanging(value);
					this.SendPropertyChanging();
					this._Код_лога = value;
					this.SendPropertyChanged("Код_лога");
					this.OnКод_логаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код состояния]", Storage="_Код_состояния", DbType="Int")]
		public System.Nullable<int> Код_состояния
		{
			get
			{
				return this._Код_состояния;
			}
			set
			{
				if ((this._Код_состояния != value))
				{
					this.OnКод_состоянияChanging(value);
					this.SendPropertyChanging();
					this._Код_состояния = value;
					this.SendPropertyChanged("Код_состояния");
					this.OnКод_состоянияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Журнал_Событие", Storage="_Журнал", ThisKey="Код_журнала", OtherKey="Номер", IsForeignKey=true)]
		public Журнал Журнал
		{
			get
			{
				return this._Журнал.Entity;
			}
			set
			{
				Журнал previousValue = this._Журнал.Entity;
				if (((previousValue != value) 
							|| (this._Журнал.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Журнал.Entity = null;
						previousValue.Событие.Remove(this);
					}
					this._Журнал.Entity = value;
					if ((value != null))
					{
						value.Событие.Add(this);
						this._Код_журнала = value.Номер;
					}
					else
					{
						this._Код_журнала = default(int);
					}
					this.SendPropertyChanged("Журнал");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Лог_Событие", Storage="_Лог", ThisKey="Код_лога", OtherKey="Номер", IsForeignKey=true)]
		public Лог Лог
		{
			get
			{
				return this._Лог.Entity;
			}
			set
			{
				Лог previousValue = this._Лог.Entity;
				if (((previousValue != value) 
							|| (this._Лог.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Лог.Entity = null;
						previousValue.Событие.Remove(this);
					}
					this._Лог.Entity = value;
					if ((value != null))
					{
						value.Событие.Add(this);
						this._Код_лога = value.Номер;
					}
					else
					{
						this._Код_лога = default(Nullable<int>);
					}
					this.SendPropertyChanged("Лог");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Хост_Событие", Storage="_Хост", ThisKey="Код_хоста", OtherKey="Номер", IsForeignKey=true)]
		public Хост Хост
		{
			get
			{
				return this._Хост.Entity;
			}
			set
			{
				Хост previousValue = this._Хост.Entity;
				if (((previousValue != value) 
							|| (this._Хост.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Хост.Entity = null;
						previousValue.Событие.Remove(this);
					}
					this._Хост.Entity = value;
					if ((value != null))
					{
						value.Событие.Add(this);
						this._Код_хоста = value.Номер;
					}
					else
					{
						this._Код_хоста = default(int);
					}
					this.SendPropertyChanged("Хост");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Состояние_оборудования_Событие", Storage="_Состояние_оборудования", ThisKey="Код_состояния", OtherKey="Номер", IsForeignKey=true)]
		public Состояние_оборудования Состояние_оборудования
		{
			get
			{
				return this._Состояние_оборудования.Entity;
			}
			set
			{
				Состояние_оборудования previousValue = this._Состояние_оборудования.Entity;
				if (((previousValue != value) 
							|| (this._Состояние_оборудования.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Состояние_оборудования.Entity = null;
						previousValue.Событие.Remove(this);
					}
					this._Состояние_оборудования.Entity = value;
					if ((value != null))
					{
						value.Событие.Add(this);
						this._Код_состояния = value.Номер;
					}
					else
					{
						this._Код_состояния = default(Nullable<int>);
					}
					this.SendPropertyChanged("Состояние_оборудования");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Тип журнала]")]
	public partial class Тип_журнала : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private EntitySet<Журнал> _Журнал;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    #endregion
		
		public Тип_журнала()
		{
			this._Журнал = new EntitySet<Журнал>(new Action<Журнал>(this.attach_Журнал), new Action<Журнал>(this.detach_Журнал));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_журнала_Журнал", Storage="_Журнал", ThisKey="Код", OtherKey="Код_типа")]
		public EntitySet<Журнал> Журнал
		{
			get
			{
				return this._Журнал;
			}
			set
			{
				this._Журнал.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Журнал(Журнал entity)
		{
			this.SendPropertyChanging();
			entity.Тип_журнала = this;
		}
		
		private void detach_Журнал(Журнал entity)
		{
			this.SendPropertyChanging();
			entity.Тип_журнала = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Тип лога]")]
	public partial class Тип_лога : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private string _Описание;
		
		private EntitySet<Лог> _Лог;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnОписаниеChanging(string value);
    partial void OnОписаниеChanged();
    #endregion
		
		public Тип_лога()
		{
			this._Лог = new EntitySet<Лог>(new Action<Лог>(this.attach_Лог), new Action<Лог>(this.detach_Лог));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Описание", DbType="NVarChar(50)")]
		public string Описание
		{
			get
			{
				return this._Описание;
			}
			set
			{
				if ((this._Описание != value))
				{
					this.OnОписаниеChanging(value);
					this.SendPropertyChanging();
					this._Описание = value;
					this.SendPropertyChanged("Описание");
					this.OnОписаниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_лога_Лог", Storage="_Лог", ThisKey="Код", OtherKey="Код_лога")]
		public EntitySet<Лог> Лог
		{
			get
			{
				return this._Лог;
			}
			set
			{
				this._Лог.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Лог(Лог entity)
		{
			this.SendPropertyChanging();
			entity.Тип_лога = this;
		}
		
		private void detach_Лог(Лог entity)
		{
			this.SendPropertyChanging();
			entity.Тип_лога = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Тип населенного пункта]")]
	public partial class Тип_населенного_пункта : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private EntitySet<Населенный_пункт> _Населенный_пункт;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    #endregion
		
		public Тип_населенного_пункта()
		{
			this._Населенный_пункт = new EntitySet<Населенный_пункт>(new Action<Населенный_пункт>(this.attach_Населенный_пункт), new Action<Населенный_пункт>(this.detach_Населенный_пункт));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50)")]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_населенного_пункта_Населенный_пункт", Storage="_Населенный_пункт", ThisKey="Код", OtherKey="Код_типа")]
		public EntitySet<Населенный_пункт> Населенный_пункт
		{
			get
			{
				return this._Населенный_пункт;
			}
			set
			{
				this._Населенный_пункт.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Населенный_пункт(Населенный_пункт entity)
		{
			this.SendPropertyChanging();
			entity.Тип_населенного_пункта = this;
		}
		
		private void detach_Населенный_пункт(Населенный_пункт entity)
		{
			this.SendPropertyChanging();
			entity.Тип_населенного_пункта = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Тип показателя]")]
	public partial class Тип_показателя : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private EntitySet<Показатель> _Показатель;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    #endregion
		
		public Тип_показателя()
		{
			this._Показатель = new EntitySet<Показатель>(new Action<Показатель>(this.attach_Показатель), new Action<Показатель>(this.detach_Показатель));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_показателя_Показатель", Storage="_Показатель", ThisKey="Код", OtherKey="Тип_показателя")]
		public EntitySet<Показатель> Показатель
		{
			get
			{
				return this._Показатель;
			}
			set
			{
				this._Показатель.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Показатель(Показатель entity)
		{
			this.SendPropertyChanging();
			entity.Тип_показателя1 = this;
		}
		
		private void detach_Показатель(Показатель entity)
		{
			this.SendPropertyChanging();
			entity.Тип_показателя1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Тип работ]")]
	public partial class Тип_работ : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private EntitySet<Документ_работ> _Документ_работ;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    #endregion
		
		public Тип_работ()
		{
			this._Документ_работ = new EntitySet<Документ_работ>(new Action<Документ_работ>(this.attach_Документ_работ), new Action<Документ_работ>(this.detach_Документ_работ));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_работ_Документ_работ", Storage="_Документ_работ", ThisKey="Код", OtherKey="Код_типа")]
		public EntitySet<Документ_работ> Документ_работ
		{
			get
			{
				return this._Документ_работ;
			}
			set
			{
				this._Документ_работ.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Документ_работ(Документ_работ entity)
		{
			this.SendPropertyChanging();
			entity.Тип_работ = this;
		}
		
		private void detach_Документ_работ(Документ_работ entity)
		{
			this.SendPropertyChanging();
			entity.Тип_работ = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Тип улицы]")]
	public partial class Тип_улицы : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private EntitySet<Улица> _Улица;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    #endregion
		
		public Тип_улицы()
		{
			this._Улица = new EntitySet<Улица>(new Action<Улица>(this.attach_Улица), new Action<Улица>(this.detach_Улица));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50)")]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_улицы_Улица", Storage="_Улица", ThisKey="Код", OtherKey="Код_типа")]
		public EntitySet<Улица> Улица
		{
			get
			{
				return this._Улица;
			}
			set
			{
				this._Улица.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Улица(Улица entity)
		{
			this.SendPropertyChanging();
			entity.Тип_улицы = this;
		}
		
		private void detach_Улица(Улица entity)
		{
			this.SendPropertyChanging();
			entity.Тип_улицы = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Тип юр. лица]")]
	public partial class Тип_юр__лица : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private string _Описание;
		
		private EntitySet<Юридическое_лицо> _Юридическое_лицо;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnОписаниеChanging(string value);
    partial void OnОписаниеChanged();
    #endregion
		
		public Тип_юр__лица()
		{
			this._Юридическое_лицо = new EntitySet<Юридическое_лицо>(new Action<Юридическое_лицо>(this.attach_Юридическое_лицо), new Action<Юридическое_лицо>(this.detach_Юридическое_лицо));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Описание", DbType="NVarChar(200)")]
		public string Описание
		{
			get
			{
				return this._Описание;
			}
			set
			{
				if ((this._Описание != value))
				{
					this.OnОписаниеChanging(value);
					this.SendPropertyChanging();
					this._Описание = value;
					this.SendPropertyChanged("Описание");
					this.OnОписаниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_юр__лица_Юридическое_лицо", Storage="_Юридическое_лицо", ThisKey="Код", OtherKey="Код_типа")]
		public EntitySet<Юридическое_лицо> Юридическое_лицо
		{
			get
			{
				return this._Юридическое_лицо;
			}
			set
			{
				this._Юридическое_лицо.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Юридическое_лицо(Юридическое_лицо entity)
		{
			this.SendPropertyChanging();
			entity.Тип_юр__лица = this;
		}
		
		private void detach_Юридическое_лицо(Юридическое_лицо entity)
		{
			this.SendPropertyChanging();
			entity.Тип_юр__лица = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Улица")]
	public partial class Улица : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private int _Код_типа;
		
		private EntitySet<Адрес> _Адрес;
		
		private EntityRef<Тип_улицы> _Тип_улицы;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnКод_типаChanging(int value);
    partial void OnКод_типаChanged();
    #endregion
		
		public Улица()
		{
			this._Адрес = new EntitySet<Адрес>(new Action<Адрес>(this.attach_Адрес), new Action<Адрес>(this.detach_Адрес));
			this._Тип_улицы = default(EntityRef<Тип_улицы>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код типа]", Storage="_Код_типа", DbType="Int NOT NULL")]
		public int Код_типа
		{
			get
			{
				return this._Код_типа;
			}
			set
			{
				if ((this._Код_типа != value))
				{
					this.OnКод_типаChanging(value);
					this.SendPropertyChanging();
					this._Код_типа = value;
					this.SendPropertyChanged("Код_типа");
					this.OnКод_типаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Улица_Адрес", Storage="_Адрес", ThisKey="Код", OtherKey="Код_улицы")]
		public EntitySet<Адрес> Адрес
		{
			get
			{
				return this._Адрес;
			}
			set
			{
				this._Адрес.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_улицы_Улица", Storage="_Тип_улицы", ThisKey="Код_типа", OtherKey="Код", IsForeignKey=true)]
		public Тип_улицы Тип_улицы
		{
			get
			{
				return this._Тип_улицы.Entity;
			}
			set
			{
				Тип_улицы previousValue = this._Тип_улицы.Entity;
				if (((previousValue != value) 
							|| (this._Тип_улицы.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Тип_улицы.Entity = null;
						previousValue.Улица.Remove(this);
					}
					this._Тип_улицы.Entity = value;
					if ((value != null))
					{
						value.Улица.Add(this);
						this._Код_типа = value.Код;
					}
					else
					{
						this._Код_типа = default(int);
					}
					this.SendPropertyChanged("Тип_улицы");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Адрес(Адрес entity)
		{
			this.SendPropertyChanging();
			entity.Улица = this;
		}
		
		private void detach_Адрес(Адрес entity)
		{
			this.SendPropertyChanging();
			entity.Улица = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Физическое лицо]")]
	public partial class Физическое_лицо : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Фамилия;
		
		private string _Имя;
		
		private string _Отчество;
		
		private string _Телефон;
		
		private EntitySet<Адрес> _Адрес;
		
		private EntitySet<Фр__труд__договора> _Фр__труд__договора;
		
		private EntitySet<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnФамилияChanging(string value);
    partial void OnФамилияChanged();
    partial void OnИмяChanging(string value);
    partial void OnИмяChanged();
    partial void OnОтчествоChanging(string value);
    partial void OnОтчествоChanged();
    partial void OnТелефонChanging(string value);
    partial void OnТелефонChanged();
    #endregion
		
		public Физическое_лицо()
		{
			this._Адрес = new EntitySet<Адрес>(new Action<Адрес>(this.attach_Адрес), new Action<Адрес>(this.detach_Адрес));
			this._Фр__труд__договора = new EntitySet<Фр__труд__договора>(new Action<Фр__труд__договора>(this.attach_Фр__труд__договора), new Action<Фр__труд__договора>(this.detach_Фр__труд__договора));
			this._Users = new EntitySet<Users>(new Action<Users>(this.attach_Users), new Action<Users>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Фамилия", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Фамилия
		{
			get
			{
				return this._Фамилия;
			}
			set
			{
				if ((this._Фамилия != value))
				{
					this.OnФамилияChanging(value);
					this.SendPropertyChanging();
					this._Фамилия = value;
					this.SendPropertyChanged("Фамилия");
					this.OnФамилияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Имя", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Имя
		{
			get
			{
				return this._Имя;
			}
			set
			{
				if ((this._Имя != value))
				{
					this.OnИмяChanging(value);
					this.SendPropertyChanging();
					this._Имя = value;
					this.SendPropertyChanged("Имя");
					this.OnИмяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Отчество", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Отчество
		{
			get
			{
				return this._Отчество;
			}
			set
			{
				if ((this._Отчество != value))
				{
					this.OnОтчествоChanging(value);
					this.SendPropertyChanging();
					this._Отчество = value;
					this.SendPropertyChanged("Отчество");
					this.OnОтчествоChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Телефон", DbType="NVarChar(50)")]
		public string Телефон
		{
			get
			{
				return this._Телефон;
			}
			set
			{
				if ((this._Телефон != value))
				{
					this.OnТелефонChanging(value);
					this.SendPropertyChanging();
					this._Телефон = value;
					this.SendPropertyChanged("Телефон");
					this.OnТелефонChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Физическое_лицо_Адрес", Storage="_Адрес", ThisKey="Код", OtherKey="Код_физического_лица")]
		public EntitySet<Адрес> Адрес
		{
			get
			{
				return this._Адрес;
			}
			set
			{
				this._Адрес.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Физическое_лицо_Фр__труд__договора", Storage="_Фр__труд__договора", ThisKey="Код", OtherKey="Код_физ__лица")]
		public EntitySet<Фр__труд__договора> Фр__труд__договора
		{
			get
			{
				return this._Фр__труд__договора;
			}
			set
			{
				this._Фр__труд__договора.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Физическое_лицо_Users", Storage="_Users", ThisKey="Код", OtherKey="IdUser")]
		public EntitySet<Users> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Адрес(Адрес entity)
		{
			this.SendPropertyChanging();
			entity.Физическое_лицо = this;
		}
		
		private void detach_Адрес(Адрес entity)
		{
			this.SendPropertyChanging();
			entity.Физическое_лицо = null;
		}
		
		private void attach_Фр__труд__договора(Фр__труд__договора entity)
		{
			this.SendPropertyChanging();
			entity.Физическое_лицо = this;
		}
		
		private void detach_Фр__труд__договора(Фр__труд__договора entity)
		{
			this.SendPropertyChanging();
			entity.Физическое_лицо = null;
		}
		
		private void attach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Физическое_лицо = this;
		}
		
		private void detach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Физическое_лицо = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Фр. труд. договора]")]
	public partial class Фр__труд__договора : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер;
		
		private System.DateTime _Дата_приема;
		
		private System.Nullable<System.DateTime> _Дата_увольнения;
		
		private int _Код_физ__лица;
		
		private int _Код_юр__лица;
		
		private int _Код_должности;
		
		private EntitySet<Документ_работ> _Документ_работ;
		
		private EntityRef<Должность> _Должность;
		
		private EntityRef<Физическое_лицо> _Физическое_лицо;
		
		private EntityRef<Юридическое_лицо> _Юридическое_лицо;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомерChanging(int value);
    partial void OnНомерChanged();
    partial void OnДата_приемаChanging(System.DateTime value);
    partial void OnДата_приемаChanged();
    partial void OnДата_увольненияChanging(System.Nullable<System.DateTime> value);
    partial void OnДата_увольненияChanged();
    partial void OnКод_физ__лицаChanging(int value);
    partial void OnКод_физ__лицаChanged();
    partial void OnКод_юр__лицаChanging(int value);
    partial void OnКод_юр__лицаChanged();
    partial void OnКод_должностиChanging(int value);
    partial void OnКод_должностиChanged();
    #endregion
		
		public Фр__труд__договора()
		{
			this._Документ_работ = new EntitySet<Документ_работ>(new Action<Документ_работ>(this.attach_Документ_работ), new Action<Документ_работ>(this.detach_Документ_работ));
			this._Должность = default(EntityRef<Должность>);
			this._Физическое_лицо = default(EntityRef<Физическое_лицо>);
			this._Юридическое_лицо = default(EntityRef<Юридическое_лицо>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер
		{
			get
			{
				return this._Номер;
			}
			set
			{
				if ((this._Номер != value))
				{
					this.OnНомерChanging(value);
					this.SendPropertyChanging();
					this._Номер = value;
					this.SendPropertyChanged("Номер");
					this.OnНомерChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Дата приема]", Storage="_Дата_приема", DbType="Date NOT NULL")]
		public System.DateTime Дата_приема
		{
			get
			{
				return this._Дата_приема;
			}
			set
			{
				if ((this._Дата_приема != value))
				{
					this.OnДата_приемаChanging(value);
					this.SendPropertyChanging();
					this._Дата_приема = value;
					this.SendPropertyChanged("Дата_приема");
					this.OnДата_приемаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Дата увольнения]", Storage="_Дата_увольнения", DbType="Date")]
		public System.Nullable<System.DateTime> Дата_увольнения
		{
			get
			{
				return this._Дата_увольнения;
			}
			set
			{
				if ((this._Дата_увольнения != value))
				{
					this.OnДата_увольненияChanging(value);
					this.SendPropertyChanging();
					this._Дата_увольнения = value;
					this.SendPropertyChanged("Дата_увольнения");
					this.OnДата_увольненияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код физ. лица]", Storage="_Код_физ__лица", DbType="Int NOT NULL")]
		public int Код_физ__лица
		{
			get
			{
				return this._Код_физ__лица;
			}
			set
			{
				if ((this._Код_физ__лица != value))
				{
					this.OnКод_физ__лицаChanging(value);
					this.SendPropertyChanging();
					this._Код_физ__лица = value;
					this.SendPropertyChanged("Код_физ__лица");
					this.OnКод_физ__лицаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код юр. лица]", Storage="_Код_юр__лица", DbType="Int NOT NULL")]
		public int Код_юр__лица
		{
			get
			{
				return this._Код_юр__лица;
			}
			set
			{
				if ((this._Код_юр__лица != value))
				{
					this.OnКод_юр__лицаChanging(value);
					this.SendPropertyChanging();
					this._Код_юр__лица = value;
					this.SendPropertyChanged("Код_юр__лица");
					this.OnКод_юр__лицаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код должности]", Storage="_Код_должности", DbType="Int NOT NULL")]
		public int Код_должности
		{
			get
			{
				return this._Код_должности;
			}
			set
			{
				if ((this._Код_должности != value))
				{
					this.OnКод_должностиChanging(value);
					this.SendPropertyChanging();
					this._Код_должности = value;
					this.SendPropertyChanged("Код_должности");
					this.OnКод_должностиChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Фр__труд__договора_Документ_работ", Storage="_Документ_работ", ThisKey="Номер", OtherKey="Код_фр__труд__дог_")]
		public EntitySet<Документ_работ> Документ_работ
		{
			get
			{
				return this._Документ_работ;
			}
			set
			{
				this._Документ_работ.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Должность_Фр__труд__договора", Storage="_Должность", ThisKey="Код_должности", OtherKey="Код", IsForeignKey=true)]
		public Должность Должность
		{
			get
			{
				return this._Должность.Entity;
			}
			set
			{
				Должность previousValue = this._Должность.Entity;
				if (((previousValue != value) 
							|| (this._Должность.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Должность.Entity = null;
						previousValue.Фр__труд__договора.Remove(this);
					}
					this._Должность.Entity = value;
					if ((value != null))
					{
						value.Фр__труд__договора.Add(this);
						this._Код_должности = value.Код;
					}
					else
					{
						this._Код_должности = default(int);
					}
					this.SendPropertyChanged("Должность");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Физическое_лицо_Фр__труд__договора", Storage="_Физическое_лицо", ThisKey="Код_физ__лица", OtherKey="Код", IsForeignKey=true)]
		public Физическое_лицо Физическое_лицо
		{
			get
			{
				return this._Физическое_лицо.Entity;
			}
			set
			{
				Физическое_лицо previousValue = this._Физическое_лицо.Entity;
				if (((previousValue != value) 
							|| (this._Физическое_лицо.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Физическое_лицо.Entity = null;
						previousValue.Фр__труд__договора.Remove(this);
					}
					this._Физическое_лицо.Entity = value;
					if ((value != null))
					{
						value.Фр__труд__договора.Add(this);
						this._Код_физ__лица = value.Код;
					}
					else
					{
						this._Код_физ__лица = default(int);
					}
					this.SendPropertyChanged("Физическое_лицо");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Юридическое_лицо_Фр__труд__договора", Storage="_Юридическое_лицо", ThisKey="Код_юр__лица", OtherKey="Код", IsForeignKey=true)]
		public Юридическое_лицо Юридическое_лицо
		{
			get
			{
				return this._Юридическое_лицо.Entity;
			}
			set
			{
				Юридическое_лицо previousValue = this._Юридическое_лицо.Entity;
				if (((previousValue != value) 
							|| (this._Юридическое_лицо.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Юридическое_лицо.Entity = null;
						previousValue.Фр__труд__договора.Remove(this);
					}
					this._Юридическое_лицо.Entity = value;
					if ((value != null))
					{
						value.Фр__труд__договора.Add(this);
						this._Код_юр__лица = value.Код;
					}
					else
					{
						this._Код_юр__лица = default(int);
					}
					this.SendPropertyChanged("Юридическое_лицо");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Документ_работ(Документ_работ entity)
		{
			this.SendPropertyChanging();
			entity.Фр__труд__договора = this;
		}
		
		private void detach_Документ_работ(Документ_работ entity)
		{
			this.SendPropertyChanging();
			entity.Фр__труд__договора = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Хост")]
	public partial class Хост : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер;
		
		private string _IP_адрес;
		
		private string _Описание;
		
		private int _Код_адреса;
		
		private EntitySet<Документ_работ> _Документ_работ;
		
		private EntitySet<Событие> _Событие;
		
		private EntityRef<Адрес> _Адрес;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомерChanging(int value);
    partial void OnНомерChanged();
    partial void OnIP_адресChanging(string value);
    partial void OnIP_адресChanged();
    partial void OnОписаниеChanging(string value);
    partial void OnОписаниеChanged();
    partial void OnКод_адресаChanging(int value);
    partial void OnКод_адресаChanged();
    #endregion
		
		public Хост()
		{
			this._Документ_работ = new EntitySet<Документ_работ>(new Action<Документ_работ>(this.attach_Документ_работ), new Action<Документ_работ>(this.detach_Документ_работ));
			this._Событие = new EntitySet<Событие>(new Action<Событие>(this.attach_Событие), new Action<Событие>(this.detach_Событие));
			this._Адрес = default(EntityRef<Адрес>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер
		{
			get
			{
				return this._Номер;
			}
			set
			{
				if ((this._Номер != value))
				{
					this.OnНомерChanging(value);
					this.SendPropertyChanging();
					this._Номер = value;
					this.SendPropertyChanged("Номер");
					this.OnНомерChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[IP-адрес]", Storage="_IP_адрес", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string IP_адрес
		{
			get
			{
				return this._IP_адрес;
			}
			set
			{
				if ((this._IP_адрес != value))
				{
					this.OnIP_адресChanging(value);
					this.SendPropertyChanging();
					this._IP_адрес = value;
					this.SendPropertyChanged("IP_адрес");
					this.OnIP_адресChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Описание", DbType="NVarChar(150)")]
		public string Описание
		{
			get
			{
				return this._Описание;
			}
			set
			{
				if ((this._Описание != value))
				{
					this.OnОписаниеChanging(value);
					this.SendPropertyChanging();
					this._Описание = value;
					this.SendPropertyChanged("Описание");
					this.OnОписаниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код адреса]", Storage="_Код_адреса", DbType="Int NOT NULL")]
		public int Код_адреса
		{
			get
			{
				return this._Код_адреса;
			}
			set
			{
				if ((this._Код_адреса != value))
				{
					this.OnКод_адресаChanging(value);
					this.SendPropertyChanging();
					this._Код_адреса = value;
					this.SendPropertyChanged("Код_адреса");
					this.OnКод_адресаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Хост_Документ_работ", Storage="_Документ_работ", ThisKey="Номер", OtherKey="Код_хоста")]
		public EntitySet<Документ_работ> Документ_работ
		{
			get
			{
				return this._Документ_работ;
			}
			set
			{
				this._Документ_работ.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Хост_Событие", Storage="_Событие", ThisKey="Номер", OtherKey="Код_хоста")]
		public EntitySet<Событие> Событие
		{
			get
			{
				return this._Событие;
			}
			set
			{
				this._Событие.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Адрес_Хост", Storage="_Адрес", ThisKey="Код_адреса", OtherKey="Код", IsForeignKey=true)]
		public Адрес Адрес
		{
			get
			{
				return this._Адрес.Entity;
			}
			set
			{
				Адрес previousValue = this._Адрес.Entity;
				if (((previousValue != value) 
							|| (this._Адрес.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Адрес.Entity = null;
						previousValue.Хост.Remove(this);
					}
					this._Адрес.Entity = value;
					if ((value != null))
					{
						value.Хост.Add(this);
						this._Код_адреса = value.Код;
					}
					else
					{
						this._Код_адреса = default(int);
					}
					this.SendPropertyChanged("Адрес");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Документ_работ(Документ_работ entity)
		{
			this.SendPropertyChanging();
			entity.Хост = this;
		}
		
		private void detach_Документ_работ(Документ_работ entity)
		{
			this.SendPropertyChanging();
			entity.Хост = null;
		}
		
		private void attach_Событие(Событие entity)
		{
			this.SendPropertyChanging();
			entity.Хост = this;
		}
		
		private void detach_Событие(Событие entity)
		{
			this.SendPropertyChanging();
			entity.Хост = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Оборудование")]
	public partial class Оборудование : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер;
		
		private int _Инвентарный_номер;
		
		private System.DateTime _Дата_изготовления;
		
		private string _Описание;
		
		private int _Код_юр__лица;
		
		private EntitySet<Документ_работ> _Документ_работ;
		
		private EntitySet<ПоказательОборудование> _ПоказательОборудование;
		
		private EntityRef<Юридическое_лицо> _Юридическое_лицо;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомерChanging(int value);
    partial void OnНомерChanged();
    partial void OnИнвентарный_номерChanging(int value);
    partial void OnИнвентарный_номерChanged();
    partial void OnДата_изготовленияChanging(System.DateTime value);
    partial void OnДата_изготовленияChanged();
    partial void OnОписаниеChanging(string value);
    partial void OnОписаниеChanged();
    partial void OnКод_юр__лицаChanging(int value);
    partial void OnКод_юр__лицаChanged();
    #endregion
		
		public Оборудование()
		{
			this._Документ_работ = new EntitySet<Документ_работ>(new Action<Документ_работ>(this.attach_Документ_работ), new Action<Документ_работ>(this.detach_Документ_работ));
			this._ПоказательОборудование = new EntitySet<ПоказательОборудование>(new Action<ПоказательОборудование>(this.attach_ПоказательОборудование), new Action<ПоказательОборудование>(this.detach_ПоказательОборудование));
			this._Юридическое_лицо = default(EntityRef<Юридическое_лицо>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер
		{
			get
			{
				return this._Номер;
			}
			set
			{
				if ((this._Номер != value))
				{
					this.OnНомерChanging(value);
					this.SendPropertyChanging();
					this._Номер = value;
					this.SendPropertyChanged("Номер");
					this.OnНомерChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Инвентарный номер]", Storage="_Инвентарный_номер", DbType="Int NOT NULL")]
		public int Инвентарный_номер
		{
			get
			{
				return this._Инвентарный_номер;
			}
			set
			{
				if ((this._Инвентарный_номер != value))
				{
					this.OnИнвентарный_номерChanging(value);
					this.SendPropertyChanging();
					this._Инвентарный_номер = value;
					this.SendPropertyChanged("Инвентарный_номер");
					this.OnИнвентарный_номерChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Дата изготовления]", Storage="_Дата_изготовления", DbType="Date NOT NULL")]
		public System.DateTime Дата_изготовления
		{
			get
			{
				return this._Дата_изготовления;
			}
			set
			{
				if ((this._Дата_изготовления != value))
				{
					this.OnДата_изготовленияChanging(value);
					this.SendPropertyChanging();
					this._Дата_изготовления = value;
					this.SendPropertyChanged("Дата_изготовления");
					this.OnДата_изготовленияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Описание", DbType="NVarChar(150)")]
		public string Описание
		{
			get
			{
				return this._Описание;
			}
			set
			{
				if ((this._Описание != value))
				{
					this.OnОписаниеChanging(value);
					this.SendPropertyChanging();
					this._Описание = value;
					this.SendPropertyChanged("Описание");
					this.OnОписаниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код юр. лица]", Storage="_Код_юр__лица", DbType="Int NOT NULL")]
		public int Код_юр__лица
		{
			get
			{
				return this._Код_юр__лица;
			}
			set
			{
				if ((this._Код_юр__лица != value))
				{
					this.OnКод_юр__лицаChanging(value);
					this.SendPropertyChanging();
					this._Код_юр__лица = value;
					this.SendPropertyChanged("Код_юр__лица");
					this.OnКод_юр__лицаChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Оборудование_Документ_работ", Storage="_Документ_работ", ThisKey="Номер", OtherKey="Код_оборудования")]
		public EntitySet<Документ_работ> Документ_работ
		{
			get
			{
				return this._Документ_работ;
			}
			set
			{
				this._Документ_работ.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Оборудование_ПоказательОборудование", Storage="_ПоказательОборудование", ThisKey="Номер", OtherKey="Код_Оборудования")]
		public EntitySet<ПоказательОборудование> ПоказательОборудование
		{
			get
			{
				return this._ПоказательОборудование;
			}
			set
			{
				this._ПоказательОборудование.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Юридическое_лицо_Оборудование", Storage="_Юридическое_лицо", ThisKey="Код_юр__лица", OtherKey="Код", IsForeignKey=true)]
		public Юридическое_лицо Юридическое_лицо
		{
			get
			{
				return this._Юридическое_лицо.Entity;
			}
			set
			{
				Юридическое_лицо previousValue = this._Юридическое_лицо.Entity;
				if (((previousValue != value) 
							|| (this._Юридическое_лицо.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Юридическое_лицо.Entity = null;
						previousValue.Оборудование.Remove(this);
					}
					this._Юридическое_лицо.Entity = value;
					if ((value != null))
					{
						value.Оборудование.Add(this);
						this._Код_юр__лица = value.Код;
					}
					else
					{
						this._Код_юр__лица = default(int);
					}
					this.SendPropertyChanged("Юридическое_лицо");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Документ_работ(Документ_работ entity)
		{
			this.SendPropertyChanging();
			entity.Оборудование = this;
		}
		
		private void detach_Документ_работ(Документ_работ entity)
		{
			this.SendPropertyChanging();
			entity.Оборудование = null;
		}
		
		private void attach_ПоказательОборудование(ПоказательОборудование entity)
		{
			this.SendPropertyChanging();
			entity.Оборудование = this;
		}
		
		private void detach_ПоказательОборудование(ПоказательОборудование entity)
		{
			this.SendPropertyChanging();
			entity.Оборудование = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Показатель")]
	public partial class Показатель : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Значение;
		
		private System.Nullable<int> _Код_показателя;
		
		private System.Nullable<int> _Код_состояния;
		
		private int _Тип_показателя;
		
		private int _Код_вида_показателя;
		
		private System.Nullable<int> _Единицы_измерения;
		
		private EntitySet<Показатель> _Показатель2;
		
		private EntitySet<ПоказательОборудование> _ПоказательОборудование;
		
		private EntityRef<Вид_показателя> _Вид_показателя;
		
		private EntityRef<Единицы_измерения> _Единицы_измерения1;
		
		private EntityRef<Показатель> _Показатель1;
		
		private EntityRef<Тип_показателя> _Тип_показателя1;
		
		private EntityRef<Состояние_оборудования> _Состояние_оборудования;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnЗначениеChanging(string value);
    partial void OnЗначениеChanged();
    partial void OnКод_показателяChanging(System.Nullable<int> value);
    partial void OnКод_показателяChanged();
    partial void OnКод_состоянияChanging(System.Nullable<int> value);
    partial void OnКод_состоянияChanged();
    partial void OnТип_показателяChanging(int value);
    partial void OnТип_показателяChanged();
    partial void OnКод_вида_показателяChanging(int value);
    partial void OnКод_вида_показателяChanged();
    partial void OnЕдиницы_измеренияChanging(System.Nullable<int> value);
    partial void OnЕдиницы_измеренияChanged();
    #endregion
		
		public Показатель()
		{
			this._Показатель2 = new EntitySet<Показатель>(new Action<Показатель>(this.attach_Показатель2), new Action<Показатель>(this.detach_Показатель2));
			this._ПоказательОборудование = new EntitySet<ПоказательОборудование>(new Action<ПоказательОборудование>(this.attach_ПоказательОборудование), new Action<ПоказательОборудование>(this.detach_ПоказательОборудование));
			this._Вид_показателя = default(EntityRef<Вид_показателя>);
			this._Единицы_измерения1 = default(EntityRef<Единицы_измерения>);
			this._Показатель1 = default(EntityRef<Показатель>);
			this._Тип_показателя1 = default(EntityRef<Тип_показателя>);
			this._Состояние_оборудования = default(EntityRef<Состояние_оборудования>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Значение", DbType="NVarChar(50)")]
		public string Значение
		{
			get
			{
				return this._Значение;
			}
			set
			{
				if ((this._Значение != value))
				{
					this.OnЗначениеChanging(value);
					this.SendPropertyChanging();
					this._Значение = value;
					this.SendPropertyChanged("Значение");
					this.OnЗначениеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код показателя]", Storage="_Код_показателя", DbType="Int")]
		public System.Nullable<int> Код_показателя
		{
			get
			{
				return this._Код_показателя;
			}
			set
			{
				if ((this._Код_показателя != value))
				{
					this.OnКод_показателяChanging(value);
					this.SendPropertyChanging();
					this._Код_показателя = value;
					this.SendPropertyChanged("Код_показателя");
					this.OnКод_показателяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код состояния]", Storage="_Код_состояния", DbType="Int")]
		public System.Nullable<int> Код_состояния
		{
			get
			{
				return this._Код_состояния;
			}
			set
			{
				if ((this._Код_состояния != value))
				{
					this.OnКод_состоянияChanging(value);
					this.SendPropertyChanging();
					this._Код_состояния = value;
					this.SendPropertyChanged("Код_состояния");
					this.OnКод_состоянияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Тип показателя]", Storage="_Тип_показателя", DbType="Int NOT NULL")]
		public int Тип_показателя
		{
			get
			{
				return this._Тип_показателя;
			}
			set
			{
				if ((this._Тип_показателя != value))
				{
					this.OnТип_показателяChanging(value);
					this.SendPropertyChanging();
					this._Тип_показателя = value;
					this.SendPropertyChanged("Тип_показателя");
					this.OnТип_показателяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код вида показателя]", Storage="_Код_вида_показателя", DbType="Int NOT NULL")]
		public int Код_вида_показателя
		{
			get
			{
				return this._Код_вида_показателя;
			}
			set
			{
				if ((this._Код_вида_показателя != value))
				{
					this.OnКод_вида_показателяChanging(value);
					this.SendPropertyChanging();
					this._Код_вида_показателя = value;
					this.SendPropertyChanged("Код_вида_показателя");
					this.OnКод_вида_показателяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Единицы измерения]", Storage="_Единицы_измерения", DbType="Int")]
		public System.Nullable<int> Единицы_измерения
		{
			get
			{
				return this._Единицы_измерения;
			}
			set
			{
				if ((this._Единицы_измерения != value))
				{
					this.OnЕдиницы_измеренияChanging(value);
					this.SendPropertyChanging();
					this._Единицы_измерения = value;
					this.SendPropertyChanged("Единицы_измерения");
					this.OnЕдиницы_измеренияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Показатель_Показатель", Storage="_Показатель2", ThisKey="Код", OtherKey="Код_показателя")]
		public EntitySet<Показатель> Показатель2
		{
			get
			{
				return this._Показатель2;
			}
			set
			{
				this._Показатель2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Показатель_ПоказательОборудование", Storage="_ПоказательОборудование", ThisKey="Код", OtherKey="Код_Показателя")]
		public EntitySet<ПоказательОборудование> ПоказательОборудование
		{
			get
			{
				return this._ПоказательОборудование;
			}
			set
			{
				this._ПоказательОборудование.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Вид_показателя_Показатель", Storage="_Вид_показателя", ThisKey="Код_вида_показателя", OtherKey="Код", IsForeignKey=true)]
		public Вид_показателя Вид_показателя
		{
			get
			{
				return this._Вид_показателя.Entity;
			}
			set
			{
				Вид_показателя previousValue = this._Вид_показателя.Entity;
				if (((previousValue != value) 
							|| (this._Вид_показателя.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Вид_показателя.Entity = null;
						previousValue.Показатель.Remove(this);
					}
					this._Вид_показателя.Entity = value;
					if ((value != null))
					{
						value.Показатель.Add(this);
						this._Код_вида_показателя = value.Код;
					}
					else
					{
						this._Код_вида_показателя = default(int);
					}
					this.SendPropertyChanged("Вид_показателя");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Единицы_измерения_Показатель", Storage="_Единицы_измерения1", ThisKey="Единицы_измерения", OtherKey="Код", IsForeignKey=true)]
		public Единицы_измерения Единицы_измерения1
		{
			get
			{
				return this._Единицы_измерения1.Entity;
			}
			set
			{
				Единицы_измерения previousValue = this._Единицы_измерения1.Entity;
				if (((previousValue != value) 
							|| (this._Единицы_измерения1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Единицы_измерения1.Entity = null;
						previousValue.Показатель.Remove(this);
					}
					this._Единицы_измерения1.Entity = value;
					if ((value != null))
					{
						value.Показатель.Add(this);
						this._Единицы_измерения = value.Код;
					}
					else
					{
						this._Единицы_измерения = default(Nullable<int>);
					}
					this.SendPropertyChanged("Единицы_измерения1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Показатель_Показатель", Storage="_Показатель1", ThisKey="Код_показателя", OtherKey="Код", IsForeignKey=true)]
		public Показатель Показатель1
		{
			get
			{
				return this._Показатель1.Entity;
			}
			set
			{
				Показатель previousValue = this._Показатель1.Entity;
				if (((previousValue != value) 
							|| (this._Показатель1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Показатель1.Entity = null;
						previousValue.Показатель2.Remove(this);
					}
					this._Показатель1.Entity = value;
					if ((value != null))
					{
						value.Показатель2.Add(this);
						this._Код_показателя = value.Код;
					}
					else
					{
						this._Код_показателя = default(Nullable<int>);
					}
					this.SendPropertyChanged("Показатель1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тип_показателя_Показатель", Storage="_Тип_показателя1", ThisKey="Тип_показателя", OtherKey="Код", IsForeignKey=true)]
		public Тип_показателя Тип_показателя1
		{
			get
			{
				return this._Тип_показателя1.Entity;
			}
			set
			{
				Тип_показателя previousValue = this._Тип_показателя1.Entity;
				if (((previousValue != value) 
							|| (this._Тип_показателя1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Тип_показателя1.Entity = null;
						previousValue.Показатель.Remove(this);
					}
					this._Тип_показателя1.Entity = value;
					if ((value != null))
					{
						value.Показатель.Add(this);
						this._Тип_показателя = value.Код;
					}
					else
					{
						this._Тип_показателя = default(int);
					}
					this.SendPropertyChanged("Тип_показателя1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Состояние_оборудования_Показатель", Storage="_Состояние_оборудования", ThisKey="Код_состояния", OtherKey="Номер", IsForeignKey=true)]
		public Состояние_оборудования Состояние_оборудования
		{
			get
			{
				return this._Состояние_оборудования.Entity;
			}
			set
			{
				Состояние_оборудования previousValue = this._Состояние_оборудования.Entity;
				if (((previousValue != value) 
							|| (this._Состояние_оборудования.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Состояние_оборудования.Entity = null;
						previousValue.Показатель.Remove(this);
					}
					this._Состояние_оборудования.Entity = value;
					if ((value != null))
					{
						value.Показатель.Add(this);
						this._Код_состояния = value.Номер;
					}
					else
					{
						this._Код_состояния = default(Nullable<int>);
					}
					this.SendPropertyChanged("Состояние_оборудования");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Показатель2(Показатель entity)
		{
			this.SendPropertyChanging();
			entity.Показатель1 = this;
		}
		
		private void detach_Показатель2(Показатель entity)
		{
			this.SendPropertyChanging();
			entity.Показатель1 = null;
		}
		
		private void attach_ПоказательОборудование(ПоказательОборудование entity)
		{
			this.SendPropertyChanging();
			entity.Показатель = this;
		}
		
		private void detach_ПоказательОборудование(ПоказательОборудование entity)
		{
			this.SendPropertyChanging();
			entity.Показатель = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ПоказательОборудование")]
	public partial class ПоказательОборудование : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private int _Код_Оборудования;
		
		private int _Код_Показателя;
		
		private EntityRef<Оборудование> _Оборудование;
		
		private EntityRef<Показатель> _Показатель;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnКод_ОборудованияChanging(int value);
    partial void OnКод_ОборудованияChanged();
    partial void OnКод_ПоказателяChanging(int value);
    partial void OnКод_ПоказателяChanged();
    #endregion
		
		public ПоказательОборудование()
		{
			this._Оборудование = default(EntityRef<Оборудование>);
			this._Показатель = default(EntityRef<Показатель>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код Оборудования]", Storage="_Код_Оборудования", DbType="Int NOT NULL")]
		public int Код_Оборудования
		{
			get
			{
				return this._Код_Оборудования;
			}
			set
			{
				if ((this._Код_Оборудования != value))
				{
					this.OnКод_ОборудованияChanging(value);
					this.SendPropertyChanging();
					this._Код_Оборудования = value;
					this.SendPropertyChanged("Код_Оборудования");
					this.OnКод_ОборудованияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Код Показателя]", Storage="_Код_Показателя", DbType="Int NOT NULL")]
		public int Код_Показателя
		{
			get
			{
				return this._Код_Показателя;
			}
			set
			{
				if ((this._Код_Показателя != value))
				{
					this.OnКод_ПоказателяChanging(value);
					this.SendPropertyChanging();
					this._Код_Показателя = value;
					this.SendPropertyChanged("Код_Показателя");
					this.OnКод_ПоказателяChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Оборудование_ПоказательОборудование", Storage="_Оборудование", ThisKey="Код_Оборудования", OtherKey="Номер", IsForeignKey=true)]
		public Оборудование Оборудование
		{
			get
			{
				return this._Оборудование.Entity;
			}
			set
			{
				Оборудование previousValue = this._Оборудование.Entity;
				if (((previousValue != value) 
							|| (this._Оборудование.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Оборудование.Entity = null;
						previousValue.ПоказательОборудование.Remove(this);
					}
					this._Оборудование.Entity = value;
					if ((value != null))
					{
						value.ПоказательОборудование.Add(this);
						this._Код_Оборудования = value.Номер;
					}
					else
					{
						this._Код_Оборудования = default(int);
					}
					this.SendPropertyChanged("Оборудование");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Показатель_ПоказательОборудование", Storage="_Показатель", ThisKey="Код_Показателя", OtherKey="Код", IsForeignKey=true)]
		public Показатель Показатель
		{
			get
			{
				return this._Показатель.Entity;
			}
			set
			{
				Показатель previousValue = this._Показатель.Entity;
				if (((previousValue != value) 
							|| (this._Показатель.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Показатель.Entity = null;
						previousValue.ПоказательОборудование.Remove(this);
					}
					this._Показатель.Entity = value;
					if ((value != null))
					{
						value.ПоказательОборудование.Add(this);
						this._Код_Показателя = value.Код;
					}
					else
					{
						this._Код_Показателя = default(int);
					}
					this.SendPropertyChanged("Показатель");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Состояние оборудования]")]
	public partial class Состояние_оборудования : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Номер;
		
		private string _Номер_состояния;
		
		private EntitySet<Событие> _Событие;
		
		private EntitySet<Показатель> _Показатель;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnНомерChanging(int value);
    partial void OnНомерChanged();
    partial void OnНомер_состоянияChanging(string value);
    partial void OnНомер_состоянияChanged();
    #endregion
		
		public Состояние_оборудования()
		{
			this._Событие = new EntitySet<Событие>(new Action<Событие>(this.attach_Событие), new Action<Событие>(this.detach_Событие));
			this._Показатель = new EntitySet<Показатель>(new Action<Показатель>(this.attach_Показатель), new Action<Показатель>(this.detach_Показатель));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Номер", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Номер
		{
			get
			{
				return this._Номер;
			}
			set
			{
				if ((this._Номер != value))
				{
					this.OnНомерChanging(value);
					this.SendPropertyChanging();
					this._Номер = value;
					this.SendPropertyChanged("Номер");
					this.OnНомерChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Номер состояния]", Storage="_Номер_состояния", DbType="NVarChar(50)")]
		public string Номер_состояния
		{
			get
			{
				return this._Номер_состояния;
			}
			set
			{
				if ((this._Номер_состояния != value))
				{
					this.OnНомер_состоянияChanging(value);
					this.SendPropertyChanging();
					this._Номер_состояния = value;
					this.SendPropertyChanged("Номер_состояния");
					this.OnНомер_состоянияChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Состояние_оборудования_Событие", Storage="_Событие", ThisKey="Номер", OtherKey="Код_состояния")]
		public EntitySet<Событие> Событие
		{
			get
			{
				return this._Событие;
			}
			set
			{
				this._Событие.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Состояние_оборудования_Показатель", Storage="_Показатель", ThisKey="Номер", OtherKey="Код_состояния")]
		public EntitySet<Показатель> Показатель
		{
			get
			{
				return this._Показатель;
			}
			set
			{
				this._Показатель.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Событие(Событие entity)
		{
			this.SendPropertyChanging();
			entity.Состояние_оборудования = this;
		}
		
		private void detach_Событие(Событие entity)
		{
			this.SendPropertyChanging();
			entity.Состояние_оборудования = null;
		}
		
		private void attach_Показатель(Показатель entity)
		{
			this.SendPropertyChanging();
			entity.Состояние_оборудования = this;
		}
		
		private void detach_Показатель(Показатель entity)
		{
			this.SendPropertyChanging();
			entity.Состояние_оборудования = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUsers")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _UserName;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private string _Discriminator;
		
		private System.Nullable<int> _IdUser;
		
		private EntitySet<AspNetUserRoles> _AspNetUserRoles;
		
		private EntityRef<Физическое_лицо> _Физическое_лицо;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnDiscriminatorChanging(string value);
    partial void OnDiscriminatorChanged();
    partial void OnIdUserChanging(System.Nullable<int> value);
    partial void OnIdUserChanged();
    #endregion
		
		public Users()
		{
			this._AspNetUserRoles = new EntitySet<AspNetUserRoles>(new Action<AspNetUserRoles>(this.attach_AspNetUserRoles), new Action<AspNetUserRoles>(this.detach_AspNetUserRoles));
			this._Физическое_лицо = default(EntityRef<Физическое_лицо>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NVarChar(MAX)")]
		public string UserName
		{
			get
			{
				return this._UserName;
			}
			set
			{
				if ((this._UserName != value))
				{
					this.OnUserNameChanging(value);
					this.SendPropertyChanging();
					this._UserName = value;
					this.SendPropertyChanged("UserName");
					this.OnUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Discriminator", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Discriminator
		{
			get
			{
				return this._Discriminator;
			}
			set
			{
				if ((this._Discriminator != value))
				{
					this.OnDiscriminatorChanging(value);
					this.SendPropertyChanging();
					this._Discriminator = value;
					this.SendPropertyChanged("Discriminator");
					this.OnDiscriminatorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdUser", DbType="Int")]
		public System.Nullable<int> IdUser
		{
			get
			{
				return this._IdUser;
			}
			set
			{
				if ((this._IdUser != value))
				{
					if (this._Физическое_лицо.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdUserChanging(value);
					this.SendPropertyChanging();
					this._IdUser = value;
					this.SendPropertyChanged("IdUser");
					this.OnIdUserChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_AspNetUserRoles", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserRoles> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Физическое_лицо_Users", Storage="_Физическое_лицо", ThisKey="IdUser", OtherKey="Код", IsForeignKey=true)]
		public Физическое_лицо Физическое_лицо
		{
			get
			{
				return this._Физическое_лицо.Entity;
			}
			set
			{
				Физическое_лицо previousValue = this._Физическое_лицо.Entity;
				if (((previousValue != value) 
							|| (this._Физическое_лицо.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Физическое_лицо.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Физическое_лицо.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._IdUser = value.Код;
					}
					else
					{
						this._IdUser = default(Nullable<int>);
					}
					this.SendPropertyChanged("Физическое_лицо");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserRoles(AspNetUserRoles entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRoles entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetRoles")]
	public partial class AspNetRoles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Id;
		
		private string _Name;
		
		private EntitySet<AspNetUserRoles> _AspNetUserRoles;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(string value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AspNetRoles()
		{
			this._AspNetUserRoles = new EntitySet<AspNetUserRoles>(new Action<AspNetUserRoles>(this.attach_AspNetUserRoles), new Action<AspNetUserRoles>(this.detach_AspNetUserRoles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRoles_AspNetUserRoles", Storage="_AspNetUserRoles", ThisKey="Id", OtherKey="RoleId")]
		public EntitySet<AspNetUserRoles> AspNetUserRoles
		{
			get
			{
				return this._AspNetUserRoles;
			}
			set
			{
				this._AspNetUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserRoles(AspNetUserRoles entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRoles = this;
		}
		
		private void detach_AspNetUserRoles(AspNetUserRoles entity)
		{
			this.SendPropertyChanging();
			entity.AspNetRoles = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserRoles")]
	public partial class AspNetUserRoles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _UserId;
		
		private string _RoleId;
		
		private EntityRef<AspNetRoles> _AspNetRoles;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIdChanging(string value);
    partial void OnUserIdChanged();
    partial void OnRoleIdChanging(string value);
    partial void OnRoleIdChanged();
    #endregion
		
		public AspNetUserRoles()
		{
			this._AspNetRoles = default(EntityRef<AspNetRoles>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleId", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string RoleId
		{
			get
			{
				return this._RoleId;
			}
			set
			{
				if ((this._RoleId != value))
				{
					if (this._AspNetRoles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIdChanging(value);
					this.SendPropertyChanging();
					this._RoleId = value;
					this.SendPropertyChanged("RoleId");
					this.OnRoleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AspNetRoles_AspNetUserRoles", Storage="_AspNetRoles", ThisKey="RoleId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AspNetRoles AspNetRoles
		{
			get
			{
				return this._AspNetRoles.Entity;
			}
			set
			{
				AspNetRoles previousValue = this._AspNetRoles.Entity;
				if (((previousValue != value) 
							|| (this._AspNetRoles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AspNetRoles.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._AspNetRoles.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._RoleId = value.Id;
					}
					else
					{
						this._RoleId = default(string);
					}
					this.SendPropertyChanged("AspNetRoles");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_AspNetUserRoles", Storage="_Users", ThisKey="UserId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.AspNetUserRoles.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.AspNetUserRoles.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(string);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Тег")]
	public partial class Тег : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Код;
		
		private string _Название;
		
		private string _Описание;
		
		private EntitySet<Лог> _Лог;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnКодChanging(int value);
    partial void OnКодChanged();
    partial void OnНазваниеChanging(string value);
    partial void OnНазваниеChanged();
    partial void OnОписаниеChanging(string value);
    partial void OnОписаниеChanged();
    #endregion
		
		public Тег()
		{
			this._Лог = new EntitySet<Лог>(new Action<Лог>(this.attach_Лог), new Action<Лог>(this.detach_Лог));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Код", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Код
		{
			get
			{
				return this._Код;
			}
			set
			{
				if ((this._Код != value))
				{
					this.OnКодChanging(value);
					this.SendPropertyChanging();
					this._Код = value;
					this.SendPropertyChanged("Код");
					this.OnКодChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Название", DbType="NChar(128) NOT NULL", CanBeNull=false)]
		public string Название
		{
			get
			{
				return this._Название;
			}
			set
			{
				if ((this._Название != value))
				{
					this.OnНазваниеChanging(value);
					this.SendPropertyChanging();
					this._Название = value;
					this.SendPropertyChanged("Название");
					this.OnНазваниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Описание", DbType="NChar(256)")]
		public string Описание
		{
			get
			{
				return this._Описание;
			}
			set
			{
				if ((this._Описание != value))
				{
					this.OnОписаниеChanging(value);
					this.SendPropertyChanging();
					this._Описание = value;
					this.SendPropertyChanged("Описание");
					this.OnОписаниеChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Тег_Лог", Storage="_Лог", ThisKey="Код", OtherKey="Код_тега")]
		public EntitySet<Лог> Лог
		{
			get
			{
				return this._Лог;
			}
			set
			{
				this._Лог.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Лог(Лог entity)
		{
			this.SendPropertyChanging();
			entity.Тег = this;
		}
		
		private void detach_Лог(Лог entity)
		{
			this.SendPropertyChanging();
			entity.Тег = null;
		}
	}
}
#pragma warning restore 1591
